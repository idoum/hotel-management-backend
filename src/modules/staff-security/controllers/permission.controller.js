const Permission = require('../models/permission.model');
const Role = require('../models/role.model');
const RolePermission = require('../models/rolePermission.model');

// R√©cup√©rer toutes les permissions
const getAllPermissions = async (req, res) => {
  try {
    console.log('üöÄ R√©cup√©ration des permissions...');
    
    // Solution imm√©diate : raw query sans associations
    const permissions = await Permission.findAll({
      attributes: ['permission_id', 'permission_name', 'description'],
      raw: true,
      logging: console.log // Voir la requ√™te SQL g√©n√©r√©e
    });
    
    console.log('‚úÖ Permissions r√©cup√©r√©es:', permissions.length);
    
    // Enrichir les donn√©es pour le frontend
    const enrichedPermissions = permissions.map(permission => ({
      ...permission,
      canDelete: true, // Par d√©faut - sera calcul√© plus tard selon les relations
      roles: [] // Par d√©faut vide - sera rempli plus tard si n√©cessaire
    }));
    
    res.json(enrichedPermissions);
  } catch (error) {
    console.error('‚ùå Erreur d√©taill√©e permissions:', error);
    console.error('‚ùå Stack trace:', error.stack);
    res.status(500).json({ 
      message: "Erreur serveur permissions", 
      error: error.message,
      type: error.name 
    });
  }
};

// R√©cup√©rer une permission par ID
const getPermissionById = async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üöÄ R√©cup√©ration permission ${id}...`);
    
    const permission = await Permission.findByPk(id, {
      raw: true
    });
    
    if (!permission) {
      return res.status(404).json({ message: "Permission non trouv√©e" });
    }
    
    const enrichedPermission = {
      ...permission,
      canDelete: true,
      roles: []
    };
    
    res.json(enrichedPermission);
  } catch (error) {
    console.error(`‚ùå Erreur get permission ${req.params.id}:`, error);
    res.status(500).json({ message: "Erreur serveur", error: error.message });
  }
};

// Cr√©er une permission
const createPermission = async (req, res) => {
  try {
    const { permission_name, description } = req.body;
    console.log('üöÄ Cr√©ation permission:', { permission_name, description });
    
    if (!permission_name) {
      return res.status(400).json({ message: "Le nom de la permission est requis" });
    }
    
    const newPermission = await Permission.create({
      permission_name,
      description: description || null
    });
    
    console.log('‚úÖ Permission cr√©√©e:', newPermission.toJSON());
    res.status(201).json(newPermission);
  } catch (error) {
    console.error('‚ùå Erreur create permission:', error);
    
    // Gestion des erreurs sp√©cifiques
    if (error.name === 'SequelizeUniqueConstraintError') {
      return res.status(409).json({ message: "Cette permission existe d√©j√†" });
    }
    
    res.status(500).json({ message: "Erreur lors de la cr√©ation", error: error.message });
  }
};

// Mettre √† jour une permission
const updatePermission = async (req, res) => {
  try {
    const { id } = req.params;
    const { permission_name, description } = req.body;
    console.log(`üöÄ Mise √† jour permission ${id}:`, { permission_name, description });
    
    const [updatedRowsCount] = await Permission.update(
      { permission_name, description },
      { where: { permission_id: id } }
    );
    
    if (updatedRowsCount === 0) {
      return res.status(404).json({ message: "Permission non trouv√©e" });
    }
    
    const updatedPermission = await Permission.findByPk(id, { raw: true });
    console.log('‚úÖ Permission mise √† jour:', updatedPermission);
    res.json(updatedPermission);
  } catch (error) {
    console.error(`‚ùå Erreur update permission ${req.params.id}:`, error);
    
    if (error.name === 'SequelizeUniqueConstraintError') {
      return res.status(409).json({ message: "Cette permission existe d√©j√†" });
    }
    
    res.status(500).json({ message: "Erreur lors de la mise √† jour", error: error.message });
  }
};

// Supprimer une permission
const deletePermission = async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üöÄ Suppression permission ${id}...`);
    
    // V√©rifier si la permission est utilis√©e par des r√¥les
    try {
      const rolesUsingPermission = await RolePermission.count({
        where: { permission_id: id }
      });
      
      if (rolesUsingPermission > 0) {
        return res.status(409).json({ 
          message: `Cette permission ne peut pas √™tre supprim√©e car elle est utilis√©e par ${rolesUsingPermission} r√¥le(s)` 
        });
      }
    } catch (relationError) {
      console.warn('‚ö†Ô∏è Erreur v√©rification relations (table peut ne pas exister):', relationError.message);
    }
    
    const deletedRowsCount = await Permission.destroy({
      where: { permission_id: id }
    });
    
    if (deletedRowsCount === 0) {
      return res.status(404).json({ message: "Permission non trouv√©e" });
    }
    
    console.log(`‚úÖ Permission ${id} supprim√©e`);
    res.json({ message: "Permission supprim√©e avec succ√®s" });
  } catch (error) {
    console.error(`‚ùå Erreur delete permission ${req.params.id}:`, error);
    res.status(500).json({ message: "Erreur lors de la suppression", error: error.message });
  }
};

// V√©rifier si une permission peut √™tre supprim√©e
const canDeletePermission = async (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üöÄ V√©rification suppression permission ${id}...`);
    
    let rolesCount = 0;
    try {
      rolesCount = await RolePermission.count({
        where: { permission_id: id }
      });
    } catch (error) {
      console.warn('‚ö†Ô∏è Erreur v√©rification relations, table peut ne pas exister:', error.message);
    }
    
    const canDelete = rolesCount === 0;
    
    console.log(`‚úÖ Permission ${id} - canDelete: ${canDelete}, rolesCount: ${rolesCount}`);
    res.json({
      canDelete,
      rolesCount
    });
  } catch (error) {
    console.error(`‚ùå Erreur canDelete permission ${req.params.id}:`, error);
    res.status(500).json({ message: "Erreur serveur", error: error.message });
  }
};

// R√©cup√©rer toutes les permissions avec leurs r√¥les (version avanc√©e pour plus tard)
const getAllPermissionsWithRoles = async (req, res) => {
  try {
    console.log('üöÄ R√©cup√©ration permissions avec r√¥les...');
    
    // Version avec associations (√† utiliser quand les mod√®les seront correctement configur√©s)
    const permissions = await Permission.findAll({
      include: [
        {
          model: Role,
          as: 'roles',
          attributes: ['role_id', 'role_name'],
          through: { attributes: [] }, // Exclure les colonnes de la table de liaison
          required: false // LEFT JOIN
        }
      ],
      order: [['permission_name', 'ASC']]
    });
    
    const enrichedPermissions = permissions.map(permission => ({
      permission_id: permission.permission_id,
      permission_name: permission.permission_name,
      description: permission.description,
      roles: permission.roles || [],
      canDelete: !permission.roles || permission.roles.length === 0
    }));
    
    res.json(enrichedPermissions);
  } catch (error) {
    console.error('‚ùå Erreur getAllPermissionsWithRoles:', error);
    // Fallback vers la version simple
    return getAllPermissions(req, res);
  }
};

module.exports = {
  getAllPermissions,
  getPermissionById,
  createPermission,
  updatePermission,
  deletePermission,
  canDeletePermission,
  getAllPermissionsWithRoles
};

// Debug : V√©rifier que toutes les m√©thodes sont export√©es
console.log('üîç Exported permission controller methods:', Object.keys(module.exports));
